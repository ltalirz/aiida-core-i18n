# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2020, ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE (Theory and Simulation of Materials (THEOS) and National Centre for Computational Design and Discovery of Novel Materials (NCCR MARVEL)), Switzerland and ROBERT BOSCH LLC, USA. All rights reserved
# This file is distributed under the same license as the AiiDA package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AiiDA 1.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-23 10:56+0000\n"
"PO-Revision-Date: 2020-07-01 16:11+0000\n"
"Language-Team: German (https://www.transifex.com/aiidateam/teams/98967/de/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: de\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../docs/source/intro/about.rst:5
msgid "What is AiiDA"
msgstr ""

#: ../docs/source/intro/about.rst:7
msgid ""
"AiiDA is an open-source Python infrastructure to help researchers with "
"automating, managing, persisting, sharing and reproducing the complex "
"workflows associated with modern computational science and all associated "
"data."
msgstr ""

#: ../docs/source/intro/about.rst:9
msgid ""
"AiiDA is built to support and streamline the four core pillars of the ADES "
"model: Automation, Data, Environment, and Sharing (described `here "
"<https://arxiv.org/abs/1504.01163>`__). Some of the key features of AiiDA "
"include:"
msgstr ""

#: ../docs/source/intro/about.rst:11
msgid ""
"**Workflows:** AiiDA allows to build and execute complex, auto-documenting "
"workflows linked to multiple codes on local and remote computers."
msgstr ""

#: ../docs/source/intro/about.rst:12
msgid ""
"**High-throughput:** AiiDA's event-based workflow engine supports tens of "
"thousands of processes per hour with full check-pointing."
msgstr ""

#: ../docs/source/intro/about.rst:13
msgid ""
"**Data provenance:** AiiDA automatically tracks and records inputs, outputs "
"and metadata of all calculations and workflows in extensive provenance "
"graphs that preserve the full lineage of all data."
msgstr ""

#: ../docs/source/intro/about.rst:14
msgid ""
"**Advanced queries:** AiiDA's query language enables fast graph queries on "
"millions of nodes."
msgstr ""

#: ../docs/source/intro/about.rst:15
msgid ""
"**Plugin interface:** AiiDA can support via plugins any computational code "
"and data analytics tool, data type, scheduler, connection mode, etc. (see "
"`public plugin repository <https://aiidateam.github.io/aiida-registry/>`__)."
msgstr ""

#: ../docs/source/intro/about.rst:16
msgid ""
"**HPC interface:** AiiDA can seamlessly deal with heterogeneous and remote "
"computing resources; it works with many schedulers out of the box (`SLURM "
"<https://slurm.schedmd.com>`__, `PBS Pro <https://www.pbspro.org/>`__, "
"`torque <http://www.adaptivecomputing.com/products/torque/>`__, `SGE "
"<http://gridscheduler.sourceforge.net/>`__ or `LSF "
"<https://www.ibm.com/support/knowledgecenter/SSETD4/product_welcome_platform_lsf.html>`__)."
msgstr ""

#: ../docs/source/intro/about.rst:17
msgid ""
"**Open science:** AiiDA allows to export both full databases and selected "
"subsets, to be shared with collaborators or made available and browsable "
"online on the `Archive <https://archive.materialscloud.org/>`__ and `Explore"
" <https://www.materialscloud.org/explore>`__ sections of `Materials Cloud "
"<https://www.materialscloud.org>`__."
msgstr ""

#: ../docs/source/intro/about.rst:18
msgid ""
"**Open source:** AiiDA is released under the `MIT open-source license "
"<LICENSE.txt>`__."
msgstr ""

#: ../docs/source/intro/about.rst:20
msgid ""
"See also the `list of AiiDA-powered scientific publications "
"<http://www.aiida.net/science/>`__ and `testimonials from AiiDA users "
"<http://www.aiida.net/testimonials/>`__."
msgstr ""

#: ../docs/source/intro/get_started.rst:5
msgid "Getting started"
msgstr ""

#: ../docs/source/intro/get_started.rst:7
msgid ""
"An AiiDA installation consists of three core components (plus any external "
"codes you wish to run):"
msgstr ""

#: ../docs/source/intro/get_started.rst:9
msgid ""
"aiida-core: The main Python package and the associated ``verdi`` command "
"line interface"
msgstr ""

#: ../docs/source/intro/get_started.rst:10
msgid ""
"|PostgreSQL|: The service that manages the database that AiiDA uses to store"
" data."
msgstr ""

#: ../docs/source/intro/get_started.rst:11
msgid "|RabbitMQ|: The message broker used for communication within AiiDA."
msgstr ""

#: ../docs/source/intro/get_started.rst:25
msgid "Setup"
msgstr ""

#: ../docs/source/intro/get_started.rst:27
msgid ""
"There are multiple routes to setting up a working AiiDA environment. Which "
"of those is optimal depends on your environment and use case. If you are "
"unsure, use the :ref:`system-wide installation <intro:get_started:system-"
"wide-install>` method."
msgstr ""

#: ../docs/source/intro/get_started.rst:35
msgid ":fa:`desktop,mr-1` **System-wide installation**"
msgstr ""

#: ../docs/source/intro/get_started.rst:42
msgid ""
"Install the prerequisite services using standard package managers (apt, "
"homebrew, etc.) with administrative privileges."
msgstr ""

#: ../docs/source/intro/get_started.rst:46
msgid ":fa:`folder,mr-1` **Installation into Conda environment**"
msgstr ""

#: ../docs/source/intro/get_started.rst:53
msgid ""
"This method does not require administrative privileges, but involves manual "
"management of start-up and shut-down of services."
msgstr ""

#: ../docs/source/intro/get_started.rst:57
msgid ":fa:`cube,mr-1` **Run via docker container**"
msgstr ""

#: ../docs/source/intro/get_started.rst:64
msgid ""
"Does not require the separate installation of prerequisite services. "
"Especially well-suited to get directly started on the **tutorials**."
msgstr ""

#: ../docs/source/intro/get_started.rst:69
msgid ":fa:`cloud,mr-1` **Run via virtual machine**"
msgstr ""

#: ../docs/source/intro/get_started.rst:75
msgid ""
"`Materials Cloud <https://www.materialscloud.org>`__ provides both "
"downloadable and web based VMs, also incorporating pre-installed Materials "
"Science codes."
msgstr ""

#: ../docs/source/intro/get_started.rst:81
msgid "What's next?"
msgstr ""

#: ../docs/source/intro/get_started.rst:83
msgid ""
"After successfully completing one of the above outlined setup routes, if you"
" are new to AiiDA, we recommed you go through the :ref:`Basic Tutorial "
"<tutorial:basic>`, or see our :ref:`Next steps guide <tutorial:next-steps>`."
msgstr ""

#: ../docs/source/intro/get_started.rst:86
msgid ""
"If however, you encountered some issues, proceed to the "
":ref:`troubleshooting section <intro:troubleshooting>`."
msgstr ""

#: ../docs/source/intro/get_started.rst:88
msgid "In-depth instructions"
msgstr ""

#: ../docs/source/intro/get_started.rst:91
msgid ""
"For more detailed instructions on configuring AiiDA, :ref:`see the "
"configuration how-to <how-to:installation:configure>`."
msgstr ""

#: ../docs/source/intro/index.rst:3
msgid "Introduction"
msgstr ""

#: ../docs/source/intro/install_conda.rst:5
msgid "Installation into Conda environment"
msgstr ""

#: ../docs/source/intro/install_conda.rst:7
msgid ""
"This installation route installs all necessary software -- including the "
"prerequisite services PostgreSQL and RabbitMQ -- into a Conda environment. "
"This is the recommended method for users on shared systems and systems where"
" the user has no administrative privileges."
msgstr ""

#: ../docs/source/intro/install_conda.rst:12
msgid ""
"This installation method installs **all** software into a conda environment,"
" including PostgreSQL and RabbitMQ. See the :ref:`system-wide installation "
"<intro:get_started:system-wide-install>` to use Conda only to install the "
"AiiDA (core) Python package."
msgstr ""

#: ../docs/source/intro/install_conda.rst:19
msgid "**Install prerequisite services + AiiDA (core)**"
msgstr ""

#: ../docs/source/intro/install_conda.rst:29
msgid "**Start-up services and initialize data storage**"
msgstr ""

#: ../docs/source/intro/install_conda.rst:31
msgid ""
"Before working with AiiDA, you must first initialize a database storage area"
" on disk."
msgstr ""

#: ../docs/source/intro/install_conda.rst:37
msgid ""
"This *database cluster* may contain a collection of databases (one per "
"profile) that is managed by a single running server process. We start this "
"process with:"
msgstr ""

#: ../docs/source/intro/install_conda.rst:44
msgid "Further Reading"
msgstr ""

#: ../docs/source/intro/install_conda.rst:47
#: ../docs/source/intro/installation.rst:25
msgid ""
"`Creating a Database Cluster <https://www.postgresql.org/docs/12/creating-"
"cluster.html>`__."
msgstr ""

#: ../docs/source/intro/install_conda.rst:48
#: ../docs/source/intro/installation.rst:26
msgid ""
"`Starting the Database Server <https://www.postgresql.org/docs/12/server-"
"start.html>`__."
msgstr ""

#: ../docs/source/intro/install_conda.rst:50
msgid "Then, start the RabbitMQ server:"
msgstr ""

#: ../docs/source/intro/install_conda.rst:56
msgid "Finally, start the AiiDA daemon(s):"
msgstr ""

#: ../docs/source/intro/install_conda.rst:64
#: ../docs/source/intro/install_system.rst:251
msgid "The verdi daemon(s) must be restarted after a system reboot."
msgstr ""

#: ../docs/source/intro/install_conda.rst:68
#: ../docs/source/intro/install_system.rst:255
msgid ""
"Do not start more daemons then there are physical processors on your system."
msgstr ""

#: ../docs/source/intro/install_conda.rst:72
#: ../docs/source/intro/install_system.rst:219
msgid "**Setup profile**"
msgstr ""

#: ../docs/source/intro/install_conda.rst:74
#: ../docs/source/intro/install_system.rst:221
msgid ""
"Next, set up an AiiDA configuration profile and related data storage, with "
"the ``verdi quicksetup`` command."
msgstr ""

#: ../docs/source/intro/install_conda.rst:87
#: ../docs/source/intro/install_system.rst:234
msgid "Is AiiDA unable to auto-detect the PostgreSQL setup?"
msgstr ""

#: ../docs/source/intro/install_conda.rst:90
#: ../docs/source/intro/install_system.rst:237
msgid ""
"If you get an error saying that AiiDA has trouble autodetecting the "
"PostgreSQL setup, you will need to do the manual setup explained in the "
":ref:`troubleshooting section<intro:troubleshooting:installation:postgresql-"
"autodetect-issues>`."
msgstr ""

#: ../docs/source/intro/install_conda.rst:94
#: ../docs/source/intro/install_system.rst:259
#: ../docs/source/intro/run_docker.rst:41
msgid "**Check setup**"
msgstr ""

#: ../docs/source/intro/install_conda.rst:96
#: ../docs/source/intro/install_system.rst:261
msgid "To check that everything is set up correctly, execute:"
msgstr ""

#: ../docs/source/intro/install_conda.rst:108
msgid ""
"At this point you now have a working AiiDA environment, from which you can "
"add and retrieve data."
msgstr ""

#: ../docs/source/intro/install_conda.rst:110
#: ../docs/source/intro/install_system.rst:275
msgid "Missing a checkmark or ecountered some other issue?"
msgstr ""

#: ../docs/source/intro/install_conda.rst:113
#: ../docs/source/intro/install_system.rst:278
msgid ":ref:`See the troubleshooting section <intro:troubleshooting>`."
msgstr ""

#: ../docs/source/intro/install_conda.rst:122
msgid "**Shut-down services**"
msgstr ""

#: ../docs/source/intro/install_conda.rst:124
msgid ""
"After finishing with your aiida session, particularly if switching between "
"profiles, you may wish to power down the services:"
msgstr ""

#: ../docs/source/intro/install_system.rst:5
msgid "System-wide installation"
msgstr ""

#: ../docs/source/intro/install_system.rst:7
msgid ""
"The system-wide installation will install the prerequisite services "
"(PostgreSQL and RabbitMQ) via standard package managers such that their "
"startup and shut-down is largely managed by the operating system. The AiiDA "
"(core) Python package is then installed either with Conda or pip."
msgstr ""

#: ../docs/source/intro/install_system.rst:10
msgid ""
"This is the *recommended* installation method to setup AiiDA on a personal "
"laptop or workstation for the majority of users."
msgstr ""

#: ../docs/source/intro/install_system.rst:16
msgid "**Install prerequisite services**"
msgstr ""

#: ../docs/source/intro/install_system.rst:18
msgid ""
"AiiDA is designed to run on `Unix <https://en.wikipedia.org/wiki/Unix>`_ "
"operating systems and requires a `bash "
"<https://en.wikipedia.org/wiki/Bash_(Unix_shell)>`_ or `zsh "
"<https://en.wikipedia.org/wiki/Z_shell>`_ shell, and Python >= 3.7."
msgstr ""

#: ../docs/source/intro/install_system.rst:0
msgid "Ubuntu"
msgstr ""

#: ../docs/source/intro/install_system.rst:22
msgid "*AiiDA is tested on Ubuntu versions 16.04, 18.04, and 20.04.*"
msgstr ""

#: ../docs/source/intro/install_system.rst:24
#: ../docs/source/intro/install_system.rst:38
#: ../docs/source/intro/install_system.rst:147
#: ../docs/source/intro/install_system.rst:194
#: ../docs/source/intro/install_system.rst:206
msgid "Open a terminal and execute:"
msgstr ""

#: ../docs/source/intro/install_system.rst:0
msgid "MacOS X (Homebrew)"
msgstr ""

#: ../docs/source/intro/install_system.rst:34
msgid ""
"The recommended installation method for Mac OS X is to use `Homebrew "
"<https://brew.sh>`__."
msgstr ""

#: ../docs/source/intro/install_system.rst:36
msgid ""
"Follow `this guide <https://docs.brew.sh/Installation>`__ to install "
"Homebrew on your system if not installed yet."
msgstr ""

#: ../docs/source/intro/install_system.rst:0
msgid "Windows Subsystem for Linux"
msgstr ""

#: ../docs/source/intro/install_system.rst:48
msgid ""
"*The following instructions are for setting up AiiDA on WSL 1/2 in "
"combination with Ubuntu.*"
msgstr ""

#: ../docs/source/intro/install_system.rst:50
msgid "Installing RabbitMQ:"
msgstr ""

#: ../docs/source/intro/install_system.rst:52
msgid ""
"(WSL 1) Install and start the `Windows native RabbitMQ "
"<https://www.rabbitmq.com/install-windows.html>`_."
msgstr ""

#: ../docs/source/intro/install_system.rst:54
msgid "(WSL 2) Install RabbitMQ inside the the WSL:"
msgstr ""

#: ../docs/source/intro/install_system.rst:61
msgid "Install Python and PostgreSQL:"
msgstr ""

#: ../docs/source/intro/install_system.rst:72
msgid ""
"Create a file ``start_aiida_services.sh`` containing the following lines:"
msgstr ""

#: ../docs/source/intro/install_system.rst:79
msgid ""
"and store it in your preferred location, e.g., the home directory. Then make"
" the file executeable, and editable only by root users with:"
msgstr ""

#: ../docs/source/intro/install_system.rst:87
msgid "Next, run"
msgstr ""

#: ../docs/source/intro/install_system.rst:93
msgid "and add the line"
msgstr ""

#: ../docs/source/intro/install_system.rst:99
msgid ""
"replacing ``<username>`` with your Ubuntu username. This will allow you to "
"run *only* this specific ``.sh`` file with ``root`` access (without "
"password), without lowering security on the rest of your system."
msgstr ""

#: ../docs/source/intro/install_system.rst:102
msgid ""
"Now you can use the Windows Task Scheduler to automatically execute this "
"file on startup:"
msgstr ""

#: ../docs/source/intro/install_system.rst:104
msgid "Open Task Scheduler."
msgstr ""

#: ../docs/source/intro/install_system.rst:106
msgid "In the \"Actions\" menu, click \"Create Task\"."
msgstr ""

#: ../docs/source/intro/install_system.rst:108
msgid ""
"In \"General/Security options\", select \"Run whether user is logged on or "
"not\"."
msgstr ""

#: ../docs/source/intro/install_system.rst:110
msgid "In the \"Triggers\" tab, click \"New...\"."
msgstr ""

#: ../docs/source/intro/install_system.rst:112
msgid "In the \"Begin the task:\" dropdown, select \"At startup\"."
msgstr ""

#: ../docs/source/intro/install_system.rst:114
#: ../docs/source/intro/install_system.rst:124
msgid "Click \"OK\" to confirm."
msgstr ""

#: ../docs/source/intro/install_system.rst:116
msgid "In the \"Actions\" tab, click \"New...\"."
msgstr ""

#: ../docs/source/intro/install_system.rst:118
msgid "In the \"Action\" dropdown, select \"Start a program\"."
msgstr ""

#: ../docs/source/intro/install_system.rst:120
msgid "In the \"Program/script\" text field, add ``C:\\Windows\\System32\\bash.exe``."
msgstr ""

#: ../docs/source/intro/install_system.rst:122
msgid ""
"In the \"Add arguments (optional)\" text field, add ``-c \"sudo "
"/path/to/start_aiida_services.sh\"``."
msgstr ""

#: ../docs/source/intro/install_system.rst:126
msgid "Click \"OK\" to confirm the task."
msgstr ""

#: ../docs/source/intro/install_system.rst:128
msgid "You can tweak other details of this task to fit your needs."
msgstr ""

#: ../docs/source/intro/install_system.rst:0
msgid "Other"
msgstr ""

#: ../docs/source/intro/install_system.rst:132
msgid ""
"Install RabbitMQ following the `instructions applicable to your system "
"<https://www.rabbitmq.com/download.html>`__."
msgstr ""

#: ../docs/source/intro/install_system.rst:133
msgid ""
"Install PostgreSQL following the `instructions applicable to your system "
"<https://www.postgresql.org/download/>`__."
msgstr ""

#: ../docs/source/intro/install_system.rst:137
msgid ""
"Alternatively use the :ref:`pure conda installation method "
"<intro:get_started:conda-install>`."
msgstr ""

#: ../docs/source/intro/install_system.rst:141
msgid "**Install AiiDA (core)**"
msgstr ""

#: ../docs/source/intro/install_system.rst:0
msgid "pip + venv"
msgstr ""

#: ../docs/source/intro/install_system.rst:145
msgid "*Install the aiida-core package from PyPI into a virtual environment.*"
msgstr ""

#: ../docs/source/intro/install_system.rst:158
msgid ""
"See the `venv documentation <https://docs.python.org/3/library/venv.html>`__"
" if the activation command fails. The exact command for activating a virtual"
" environment differs slightly based on the used shell."
msgstr ""

#: ../docs/source/intro/install_system.rst:163
msgid ""
"There are additional optional packages that you may want to install, which "
"are grouped in the following categories:"
msgstr ""

#: ../docs/source/intro/install_system.rst:165
msgid ""
"``atomic_tools``: packages that allow importing and manipulating crystal "
"structure from various formats"
msgstr ""

#: ../docs/source/intro/install_system.rst:166
msgid ""
"``ssh_kerberos``: adds support for ssh transport authentication through "
"Kerberos"
msgstr ""

#: ../docs/source/intro/install_system.rst:167
msgid "``REST``: allows a REST server to be ran locally to serve AiiDA data"
msgstr ""

#: ../docs/source/intro/install_system.rst:168
msgid "``docs``: tools to build the documentation"
msgstr ""

#: ../docs/source/intro/install_system.rst:169
msgid "``notebook``: jupyter notebook - to allow it to import AiiDA modules"
msgstr ""

#: ../docs/source/intro/install_system.rst:170
msgid "``tests``: python modules required to run the automatic unit tests"
msgstr ""

#: ../docs/source/intro/install_system.rst:171
msgid ""
"``pre-commit``: pre-commit tools required for developers to enable automatic"
" code linting and formatting"
msgstr ""

#: ../docs/source/intro/install_system.rst:173
msgid ""
"In order to install any of these package groups, simply append them as a "
"comma separated list in the ``pip`` install command, for example:"
msgstr ""

#: ../docs/source/intro/install_system.rst:181
msgid ""
"If you are installing the optional ``ssh_kerberos`` and you are on Ubuntu "
"you might encounter an error related to the ``gss`` package. To fix this you"
" need to install the ``libffi-dev`` and ``libkrb5-dev`` packages:"
msgstr ""

#: ../docs/source/intro/install_system.rst:0
msgid "Conda"
msgstr ""

#: ../docs/source/intro/install_system.rst:190
msgid "*Install the aiida-core package in a Conda environment.*"
msgstr ""

#: ../docs/source/intro/install_system.rst:192
msgid ""
"Make sure that conda is installed, e.g., by following `the instructions on "
"installing Miniconda <https://docs.conda.io/en/latest/miniconda.html>`__."
msgstr ""

#: ../docs/source/intro/install_system.rst:0
msgid "From source"
msgstr ""

#: ../docs/source/intro/install_system.rst:204
msgid "*Install the aiida-core package directly from the cloned repository.*"
msgstr ""

#: ../docs/source/intro/install_system.rst:241
msgid "**Start verdi daemons**"
msgstr ""

#: ../docs/source/intro/install_system.rst:243
msgid "Start the verdi daemon(s) that are used to run AiiDA workflows."
msgstr ""

#: ../docs/source/intro/install_system.rst:273
msgid ""
"At this point you should now have a working AiiDA environment, from which "
"you can add and retrieve data."
msgstr ""

#: ../docs/source/intro/installation.rst:6
msgid "Advanced configuration"
msgstr ""

#: ../docs/source/intro/installation.rst:8
msgid ""
"This chapter covers topics that go beyond the :ref:`standard setup of AiiDA "
"<intro:get_started:setup>`. If you are new to AiiDA, we recommend you first "
"go through the :ref:`Basic Tutorial <tutorial:basic>`, or see our :ref:`Next"
" steps guide <tutorial:next-steps>`."
msgstr ""

#: ../docs/source/intro/installation.rst:15
msgid "Creating the database"
msgstr ""

#: ../docs/source/intro/installation.rst:17
msgid ""
"AiiDA uses a database to store the nodes, node attributes and other "
"information, allowing the end user to perform fast queries of the results. "
"Currently, the highly performant `PostgreSQL`_ database is supported as a "
"database backend."
msgstr ""

#: ../docs/source/intro/installation.rst:22
msgid "Find out more about the database"
msgstr ""

#: ../docs/source/intro/installation.rst:27
msgid ":ref:`The database topic <topics:database>`."
msgstr ""

#: ../docs/source/intro/installation.rst:29
msgid ""
"To manually create the database for AiiDA, you need to run the program "
"``psql`` to interact with postgres. On most operating systems, you need to "
"do so as the ``postgres`` user that was created upon installing the "
"software. To assume the role of ``postgres`` run as root:"
msgstr ""

#: ../docs/source/intro/installation.rst:37
msgid ""
"(or, equivalently, type ``sudo su - postgres``, depending on your "
"distribution) and launch the postgres program:"
msgstr ""

#: ../docs/source/intro/installation.rst:43
msgid "Create a new database user account for AiiDA by running:"
msgstr ""

#: ../docs/source/intro/installation.rst:49
msgid "replacing ``<password>`` with a password of your choice."
msgstr ""

#: ../docs/source/intro/installation.rst:51
msgid ""
"You will need to provide the password again when you configure AiiDA to use "
"this database through ``verdi setup``. If you want to change the password "
"you just created use the command:"
msgstr ""

#: ../docs/source/intro/installation.rst:58
msgid ""
"Next, we create the database itself. We enforce the UTF-8 encoding and "
"specific locales:"
msgstr ""

#: ../docs/source/intro/installation.rst:64
msgid ""
"and grant all privileges on this DB to the previously-created ``aiida`` "
"user:"
msgstr ""

#: ../docs/source/intro/installation.rst:70
msgid ""
"You have now created a database for AiiDA and you can close the postgres "
"shell by typing ``\\q``. To test if the database was created successfully, "
"you can run the following command as a regular user in a bash terminal:"
msgstr ""

#: ../docs/source/intro/installation.rst:77
msgid ""
"and type the password you inserted before, when prompted. If everything "
"worked well, you should get no error and see the prompt of the ``psql`` "
"shell."
msgstr ""

#: ../docs/source/intro/installation.rst:80
msgid ""
"If you use the same names as in the example commands above, then during the "
"``verdi setup`` phase the following parameters will apply to the newly "
"created database:"
msgstr ""

#: ../docs/source/intro/installation.rst:91
msgid "Don't forget to backup your database!"
msgstr ""

#: ../docs/source/intro/installation.rst:94
msgid ""
"See the :ref:`Database backup how-to <how-"
"to:installation:backup:postgresql>`), and :ref:`how to move your database "
"<how-to:installation:performance>`."
msgstr ""

#: ../docs/source/intro/installation.rst:97
msgid "Database setup using 'peer' authentication"
msgstr ""

#: ../docs/source/intro/installation.rst:99
msgid ""
"On Ubuntu Linux, the default PostgreSQL setup is configured to use ``peer`` "
"authentication, which allows password-less login via local Unix sockets. In "
"this mode, PostgreSQL compares the Unix user connecting to the socket with "
"its own database of users and allows a connection if a matching user exists."
msgstr ""

#: ../docs/source/intro/installation.rst:104
msgid ""
"This is an alternative route to set up your database - the standard approach"
" will work on Ubuntu just as well."
msgstr ""

#: ../docs/source/intro/installation.rst:106
msgid ""
"Below we are going to take advantage of the command-line utilities shipped "
"on Ubuntu to simplify creating users and databases compared to issuing the "
"SQL commands directly."
msgstr ""

#: ../docs/source/intro/installation.rst:108
msgid "Assume the role of ``postgres``:"
msgstr ""

#: ../docs/source/intro/installation.rst:114
msgid ""
"Create a database user with the **same name** as the UNIX user who will be "
"running AiiDA (usually your login name):"
msgstr ""

#: ../docs/source/intro/installation.rst:120
msgid "replacing ``<username>`` with your username."
msgstr ""

#: ../docs/source/intro/installation.rst:122
msgid "Next, create the database itself with your user as the owner:"
msgstr ""

#: ../docs/source/intro/installation.rst:128
msgid ""
"Exit the shell to go back to your login user. To test if the database was "
"created successfully, try:"
msgstr ""

#: ../docs/source/intro/installation.rst:135
msgid ""
"During the ``verdi setup`` phase, use ``!`` to leave host empty and specify "
"your Unix user name as the *AiiDA Database user*.:"
msgstr ""

#: ../docs/source/intro/installation.rst:148
msgid "RabbitMQ configuration"
msgstr ""

#: ../docs/source/intro/installation.rst:150
msgid ""
"In most normal setups, RabbitMQ will be installed and run as a service on "
"the same machine that hosts AiiDA itself. In that case, using the default "
"configuration proposed during a profile setup will work just fine. However, "
"when the installation of RabbitMQ is not standard, for example it runs on a "
"different port, or even runs on a completely different machine, all relevant"
" connection details can be configured with ``verdi setup``."
msgstr ""

#: ../docs/source/intro/installation.rst:154
msgid "The following parameters can be configured:"
msgstr ""

#: ../docs/source/intro/installation.rst:157
msgid "Parameter"
msgstr ""

#: ../docs/source/intro/installation.rst:157
msgid "Option"
msgstr ""

#: ../docs/source/intro/installation.rst:157
msgid "Default"
msgstr ""

#: ../docs/source/intro/installation.rst:157
msgid "Explanation"
msgstr ""

#: ../docs/source/intro/installation.rst:159
msgid "Protocol"
msgstr ""

#: ../docs/source/intro/installation.rst:159
msgid "``--broker-protocol``"
msgstr ""

#: ../docs/source/intro/installation.rst:159
msgid "``amqp``"
msgstr ""

#: ../docs/source/intro/installation.rst:159
msgid ""
"The protocol to use, can be either ``amqp`` or ``amqps`` for SSL enabled "
"connections."
msgstr ""

#: ../docs/source/intro/installation.rst:161
msgid "Username"
msgstr ""

#: ../docs/source/intro/installation.rst:161
msgid "``--broker-username``"
msgstr ""

#: ../docs/source/intro/installation.rst:161
#: ../docs/source/intro/installation.rst:163
msgid "``guest``"
msgstr ""

#: ../docs/source/intro/installation.rst:161
msgid ""
"The username with which to connect. The ``guest`` account is available and "
"usable with a default RabbitMQ installation."
msgstr ""

#: ../docs/source/intro/installation.rst:163
msgid "Password"
msgstr ""

#: ../docs/source/intro/installation.rst:163
msgid "``--broker-password``"
msgstr ""

#: ../docs/source/intro/installation.rst:163
msgid ""
"The password with which to connect. The ``guest`` account is available and "
"usable with a default RabbitMQ installation."
msgstr ""

#: ../docs/source/intro/installation.rst:165
msgid "Host"
msgstr ""

#: ../docs/source/intro/installation.rst:165
msgid "``--broker-host``"
msgstr ""

#: ../docs/source/intro/installation.rst:165
msgid "``127.0.0.1``"
msgstr ""

#: ../docs/source/intro/installation.rst:165
msgid "The hostname of the RabbitMQ server."
msgstr ""

#: ../docs/source/intro/installation.rst:167
msgid "Port"
msgstr ""

#: ../docs/source/intro/installation.rst:167
msgid "``--broker-port``"
msgstr ""

#: ../docs/source/intro/installation.rst:167
msgid "``5672``"
msgstr ""

#: ../docs/source/intro/installation.rst:167
msgid "The port to which the server listens."
msgstr ""

#: ../docs/source/intro/installation.rst:169
msgid "Virtual host"
msgstr ""

#: ../docs/source/intro/installation.rst:169
msgid "``--broker-virtual-host``"
msgstr ""

#: ../docs/source/intro/installation.rst:169
msgid "``''``"
msgstr ""

#: ../docs/source/intro/installation.rst:169
msgid ""
"Optional virtual host. Should not contain the leading forward slash, this "
"will be added automatically by AiiDA."
msgstr ""

#: ../docs/source/intro/installation.rst:171
msgid "Parameters"
msgstr ""

#: ../docs/source/intro/installation.rst:171
msgid "not available"
msgstr ""

#: ../docs/source/intro/installation.rst:171
msgid "n.a."
msgstr ""

#: ../docs/source/intro/installation.rst:171
msgid ""
"These are additional broker parameters that are typically encoded as URL "
"parameters, for example, to specify SSL parameters such as the filepath to "
"the certificate that is to be used. The parameters are currently not "
"definable through the CLI but have to be added manually in the "
"``config.json``. A key ``broker_parameters`` should be added that is a "
"dictionary, which can contain fields: ``cafile``, ``capath``, ``cadata``, "
"``certfile``, ``keyfile`` and ``no_verify_ssl``."
msgstr ""

#: ../docs/source/intro/installation.rst:182
msgid "verdi setup"
msgstr ""

#: ../docs/source/intro/installation.rst:184
msgid "After the database has been created, do:"
msgstr ""

#: ../docs/source/intro/installation.rst:190
msgid ""
"where `<profile_name>` is a profile name of your choosing. The ``verdi "
"setup`` command will guide you through the setup process through a series of"
" prompts."
msgstr ""

#: ../docs/source/intro/installation.rst:193
msgid ""
"The first information asked is your email, which will be used to associate "
"the calculations to you. In AiiDA, the email is your username, and acts as a"
" unique identifier when importing/exporting data from AiiDA."
msgstr ""

#: ../docs/source/intro/installation.rst:198
msgid ""
"The password, in the current version of AiiDA, is not used (it will be used "
"only in the REST API and in the web interface). If you leave the field "
"empty, no password will be set and no access will be granted to the user via"
" the REST API and the web interface."
msgstr ""

#: ../docs/source/intro/installation.rst:201
msgid ""
"Then, the following prompts will help you configure the database. Typical "
"settings are:"
msgstr ""

#: ../docs/source/intro/installation.rst:222
msgid "Don't forget to backup your data!"
msgstr ""

#: ../docs/source/intro/installation.rst:225
msgid ""
"See the :ref:`installation backup how-to <how-to:installation:backup>`."
msgstr ""

#: ../docs/source/intro/installation.rst:230
msgid "Managing the daemon"
msgstr ""

#: ../docs/source/intro/installation.rst:232
msgid ""
"The AiiDA daemon process runs in the background and takes care of processing"
" your submitted calculations and workflows, checking their status, "
"retrieving their results once they are finished and storing them in the "
"AiiDA database."
msgstr ""

#: ../docs/source/intro/installation.rst:234
msgid "The AiiDA daemon is controlled using three simple commands:"
msgstr ""

#: ../docs/source/intro/installation.rst:236
msgid "``verdi daemon start``: start the daemon"
msgstr ""

#: ../docs/source/intro/installation.rst:237
msgid "``verdi daemon status``: check the status of the daemon"
msgstr ""

#: ../docs/source/intro/installation.rst:238
msgid "``verdi daemon stop``: stop the daemon"
msgstr ""

#: ../docs/source/intro/installation.rst:242
msgid ""
"While operational, the daemon logs its activity to a file in "
"``~/.aiida/daemon/log/`` (or, more generally, "
"``$AIIDA_PATH/.aiida/daemon/log``). Get the latest log messages via ``verdi "
"daemon logshow``."
msgstr ""

#: ../docs/source/intro/installation.rst:248
msgid "Using AiiDA in Jupyter"
msgstr ""

#: ../docs/source/intro/installation.rst:250
msgid ""
"Install the AiiDA ``notebook`` extra **inside** the AiiDA python "
"environment, e.g. by running ``pip install aiida-core[notebook]``."
msgstr ""

#: ../docs/source/intro/installation.rst:252
msgid ""
"(optional) Register the ``%aiida`` IPython magic for loading the same "
"environment as in the ``verdi shell``:"
msgstr ""

#: ../docs/source/intro/installation.rst:254
msgid ""
"Copy the following code snippet into "
"``<home_folder>/.ipython/profile_default/startup/aiida_magic_register.py``"
msgstr ""

#: ../docs/source/intro/installation.rst:259
msgid ""
"Use ``ipython locate profile`` if you're unsure about the location of your "
"ipython profile folder."
msgstr ""

#: ../docs/source/intro/installation.rst:262
msgid "With this setup, you're ready to use AiiDA in Jupyter notebeooks."
msgstr ""

#: ../docs/source/intro/installation.rst:264
msgid "Start a Jupyter notebook server:"
msgstr ""

#: ../docs/source/intro/installation.rst:270
msgid "This will open a tab in your browser. Click on ``New -> Python``."
msgstr ""

#: ../docs/source/intro/installation.rst:272
msgid "If you registered the ``%aiida`` IPython magic, simply run:"
msgstr ""

#: ../docs/source/intro/installation.rst:278
msgid ""
"After executing the cell by ``Shift-Enter``, you should receive the message "
"\"Loaded AiiDA DB environment.\" Otherwise, you can load the profile "
"manually as you would in a Python script:"
msgstr ""

#: ../docs/source/intro/run_docker.rst:6
msgid "Run AiiDA via a Docker image"
msgstr ""

#: ../docs/source/intro/run_docker.rst:8
msgid ""
"The AiiDA team maintains a `Docker <https://www.docker.com/>`__ image on "
"`Docker Hub <https://hub.docker.com/r/aiidateam/aiida-core>`__. This image "
"contains a fully pre-configured AiiDA environment which makes it "
"particularly useful for learning and testing purposes."
msgstr ""

#: ../docs/source/intro/run_docker.rst:13
msgid ""
"All data stored in a container will persist only over the lifetime of that "
"particular container unless you use volumes (see instructions below)."
msgstr ""

#: ../docs/source/intro/run_docker.rst:19
msgid "**Start container**"
msgstr ""

#: ../docs/source/intro/run_docker.rst:21
msgid "First, pull the image:"
msgstr ""

#: ../docs/source/intro/run_docker.rst:27
msgid "Then start the container with:"
msgstr ""

#: ../docs/source/intro/run_docker.rst:33
msgid ""
"You can use the following command to block until all services have started "
"up:"
msgstr ""

#: ../docs/source/intro/run_docker.rst:43
msgid ""
"The default profile is created under the ``aiida`` user, so to execute "
"commands you must add the ``--user aiida`` option."
msgstr ""

#: ../docs/source/intro/run_docker.rst:45
msgid "For example, to check the verdi status, execute:"
msgstr ""

#: ../docs/source/intro/run_docker.rst:59
msgid "**Use container interactively**"
msgstr ""

#: ../docs/source/intro/run_docker.rst:61
msgid "To \"enter\" the container and run commands directly in the shell, use:"
msgstr ""

#: ../docs/source/intro/run_docker.rst:67
msgid ""
"This will drop you into the shell within the container as the user "
"\"aiida\"."
msgstr ""

#: ../docs/source/intro/run_docker.rst:71
msgid "**Persist data across different containers**"
msgstr ""

#: ../docs/source/intro/run_docker.rst:73
msgid ""
"If you stop the container and start it again, any data you created will "
"persist."
msgstr ""

#: ../docs/source/intro/run_docker.rst:80
msgid ""
"However, if you remove the container, **all data will be removed as well**."
msgstr ""

#: ../docs/source/intro/run_docker.rst:87
msgid ""
"The preferred way to persistently store data is to `create a volume "
"<https://docs.docker.com/storage/volumes/>`__. To create a simple volume, "
"run:"
msgstr ""

#: ../docs/source/intro/run_docker.rst:94
msgid "Then make sure to mount that volume when running the aiida container:"
msgstr ""

#: ../docs/source/intro/run_docker.rst:100
msgid ""
"Starting the container with the above command, ensures that any data stored "
"in the ``/tmp/my_data`` path within the container is stored in the ``my-"
"data`` volume and therefore persists even if the container is removed."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:5
msgid "Troubleshooting"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:7
msgid ""
"If you experience any problems, first check that all services are up and "
"running:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:19
msgid ""
"In the example output, all service have a green check mark and so should be "
"running as expected. If all services are up and running and you are still "
"experiencing problems or if you have trouble with the installation of aiida-"
"core and related services, consider the commonly encountered problems below."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:25
msgid "Installation issues"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:28
msgid "numpy dependency"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:30
msgid ""
"On a clean Ubuntu 16.04 install the pip install command ``pip install -e "
"aiida-core`` may fail due to a problem with dependencies on the ``numpy`` "
"package. In this case you may be presented with a message like the "
"following:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:38
msgid ""
"To fix this, simply install ``numpy`` individually through pip in your "
"virtual env, i.e.:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:44
msgid "followed by executing the original install command once more:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:50
msgid "This should fix the dependency error."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:53
msgid "Database installation and location"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:55
msgid ""
"If the installation fails while installing the packages related to the "
"database, you may have not installed or set up the database libraries."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:57
msgid ""
"In particular, on Mac OS X, if you installed the binary package of "
"PostgreSQL, it is possible that the PATH environment variable is not set "
"correctly, and you get a \"Error: pg_config executable not found.\" error. "
"In this case, discover where the binary is located, then add a line to your "
"``~/.bashrc`` file similar to the following:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:64
msgid ""
"and then open a new bash shell. Some possible paths can be found at this "
"`Stackoverflow link`_ and a non-exhaustive list of possible paths is the "
"following (version number may change):"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:67
msgid "``/Applications/Postgres93.app/Contents/MacOS/bin``"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:68
msgid "``/Applications/Postgres.app/Contents/Versions/9.3/bin``"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:69
msgid "``/Library/PostgreSQL/9.3/bin/pg_config``"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:71
msgid ""
"Similarly, if the package installs but then errors occur during the first of"
" AiiDA (with ``Symbol not found`` errors or similar), you may need to point "
"to the path where the dynamical libraries are. A way to do it is to add a "
"line similar to the following to the ``~/.bashrc`` and then open a new "
"shell:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:78
msgid "(you should of course adapt the path to the PostgreSQL libraries)."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:86
msgid "Autodetection of the PostgreSQL setup"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:88
msgid ""
"Sometimes AiiDA fails to autodetect the local configuration of PostgreSQL "
"when running ``verdi quicksetup``. In that case try to:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:91
msgid ""
"Create the database manually in PostgreSQL (see "
":ref:`here<intro:install:database>`)."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:92
msgid ""
"Then run the full ``verdi setup`` command (see "
":ref:`here<intro:install:verdi_setup>`)."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:96
msgid "RabbitMQ Installation (Unix)"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:98
msgid ""
"If in ``verdi status`` RabbitMQ is not connected, first check that RabbitMQ "
"is actually running:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:108
msgid ""
"By default, AiiDA profiles are configured to connect to RabbitMQ *via* "
"``amqp://guest:guest@127.0.0.1:5672``, hence this port should be open for "
"connections. In Linux / Mac OSX you can also check which ports a PID has "
"open using:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:120
msgid ""
"If a connection cannot be found, try starting ``rabbitmq-server`` in non-"
"detached mode. If you encounter an output similar to that below, it may be "
"that your versions of RabbitMQ and erlang (the programming language which "
"RabbitMQ is written in) are incompatible."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:151
msgid "You can check your version of erlang using:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:158
msgid "and your version of rabbitmq-server with:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:165
msgid ""
"Then see `RabbitMQ Erlang Version Requirements <https://www.rabbitmq.com"
"/which-erlang.html>`__, to check if these are compatible, and reinstall as "
"appropriate."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:167
msgid ""
"See also the `RabbitMQ Troubleshooting "
"<https://www.rabbitmq.com/troubleshooting.html>`__ for further information."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:170
msgid "Ensuring a UTF-8 locale"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:172
msgid ""
"For some reasons, on some machines (notably often on Mac OS X) there is no "
"default locale defined, and when you run ``verdi setup`` for the first time "
"it fails (see also `this issue`_ of django). Run in your terminal (or maybe "
"even better, add to your ``.bashrc``, but then remember to open a new shell "
"window!):"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:180
msgid "and then run ``verdi setup`` again."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:185
msgid "Possible Ubuntu dependencies"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:187
msgid ""
"Several users reported the need to install also ``libpq-dev`` (header files "
"for libpq5 - PostgreSQL library):"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:193
msgid "But under Ubuntu 12.04 this is not needed."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:196
msgid "verdi not in PATH"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:198
msgid ""
"Installing the ``aiida-core`` python package *should* add the ``verdi`` CLI "
"to your ``PATH`` automatically."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:200
msgid ""
"If the ``verdi`` executable is not available in your terminal, the folder "
"where ``pip`` places binaries may not be added to your ``PATH``"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:202
msgid ""
"For Linux systems, this folder is usually something like ``~/.local/bin``:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:208
msgid ""
"For Mac OS X systems, the path to add is usually "
"``~/Library/Python/2.7/bin``:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:214
msgid ""
"After updating your ``PATH``, the ``verdi`` command should be available."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:218
msgid ""
"A preprequisite for ``verdi`` to work is that the ``aiida`` python package "
"is importable. Test this by opening a ``python`` or ``ipython`` shell and "
"typing:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:225
msgid ""
"If you get an ``ImportError`` (and you are in the environment where AiiDA "
"was installed), you can add it to the ``PYTHONPATH`` manually:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:233
msgid "Configuring remote SSH computers"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:236
msgid "ssh_kerberos installation"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:238
msgid ""
"When installing the ``ssh_kerberos`` *optional* requirement through Anaconda"
" you may encounter the following error on Ubuntu machines:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:244
msgid ""
"This is related to an open issue in anaconda `ContinuumIO/anaconda-"
"issues#686`_. A potential solution is to run the following command:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:254
msgid "Output from .bashrc and/or .bash_profile on remote computers"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:258
msgid "This also applies to computers configured via ``local`` transport."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:260
msgid ""
"When connecting to remote computers, AiiDA (like other codes as ``sftp``) "
"can get confused if you have code in your ``.bashrc`` or ``.bash_profile`` "
"that produces output or e.g. runs commands like ``clean`` that require a "
"terminal."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:262
msgid ""
"For instance, if you add a ``echo \"a\"`` in your ``.bashrc`` and then try "
"to SFTP a file from it, you will get an error like ``Received message too "
"long 1091174400``."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:264
msgid ""
"If you still want to have code that needs an interactive shell (``echo``, "
"``clean``, ...), but you want to disable it for non-interactive shells, put "
"at the top of your file a guard like this:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:273
msgid "Everything below this will not be executed in a non-interactive shell."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:277
msgid ""
"Still, you might want to have some code on top, like e.g. setting the PATH "
"or similar, if this needs to be run also in the case of non-interactive "
"shells."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:279
msgid ""
"To test if a the computer does not produce spurious output, run (after "
"configuring):"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:285
msgid ""
"which checks and, in case of problems, suggests how to solve the problem."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:289
msgid ""
"If the methods explained above do not work, you can configure AiiDA to not "
"use a login shell when connecting to your computer, which may prevent the "
"spurious output from being printed: During ``verdi computer configure``, set"
" ``-no-use-login-shell`` or when asked to use a login shell, set it to "
"``False``. Note, however, that this may result in a slightly different "
"environment, since `certain startup files are only sourced for login shells "
"<https://unix.stackexchange.com/a/46856/155909>`_."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:298
msgid "Improvements for dependencies"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:301
msgid "Activating the ASE visualizer"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:303
msgid ""
"Within a virtual environment, attempt to visualize a structure with ``ase`` "
"(either from the shell, or using the command ``verdi data structure show "
"--format=ase <PK>``), might end up with the following error message::"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:307
msgid ""
"The issue is that ``pygtk`` is currently not pip-installable. One has to "
"install it separately and create the appropriate bindings manually in the "
"virtual environment. You can follow the following procedure to get around "
"this issue:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:310
msgid "Install the ``python-gtk2`` package. Under Ubuntu, do:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:316
msgid ""
"Create the ``lib/python2.7/dist-packages`` folder within your virtual "
"environment:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:323
msgid ""
"where ``<AIIDA_VENV_FOLDER>`` is the virtual environment folder you have "
"created during the installation process."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:326
msgid ""
"Create several symbolic links from this folder, pointing to a number of "
"files in ``/usr/lib/python2.7/dist-packages/``:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:338
msgid ""
"After that, ``verdi data structure show --format=ase <PK>`` should work."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:341
msgid "Use in ipython/jupyter"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:343
msgid ""
"In order to use the AiiDA objects and functions in Jupyter, this latter has "
"to be instructed to use the iPython kernel installed in the AiiDA virtual "
"environment. This happens by default if you install AiiDA with ``pip`` "
"including the ``notebook`` option, and run Jupyter from the AiiDA virtual "
"environment."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:346
msgid ""
"If for any reason, you do not want to install Jupyter in the virtual "
"environment, you might consider to install it out of the virtual "
"environment, if not already done:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:352
msgid "Then, activate the AiiDA virtual environment:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:358
msgid "and setup the AiiDA iPython kernel:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:365
msgid "where you have chosen a meaningful name for the new kernel."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:367
msgid "Finally, start a Jupyter server:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:373
msgid ""
"and from the newly opened browser tab select ``New -> <aiida.kernel.name>``"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:378
msgid "Increasing the logging verbosity"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:380
msgid ""
"By default, the logging level of AiiDA is minimal to avoid too much noise in"
" the logfiles. Only warnings and errors are logged to the daemon log files, "
"while info and debug messages are discarded."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:383
msgid ""
"If you are experiencing a problem, you can increase the default minimum "
"logging level of AiiDA messages, with:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:389
msgid ""
"You might also be interested in reviewing the circus log messages (the "
"``circus`` library is the daemonizer that manages the daemon runners),"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:395
msgid ""
"however those messages are usually only relevant to debug AiiDA internals."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:397
msgid ""
"For each profile that runs a daemon, there are two unique logfiles, one for "
"AiiDA log messages (named ``aiida-<profile_name>.log``) and one for the "
"circus logs (named ``circus-<profile_name>.log``). Those files can be found "
"in the ``~/.aiida/daemon/log`` folder."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:400
msgid ""
"After restarting the daemon (``verdi daemon restart``), the number of "
"messages logged will increase significantly and may help in determining the "
"source of the problem."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:404
msgid ""
"Besides ``DEBUG``, you can also use the levels defined in the `standard "
"Python logging module <https://docs.python.org/3/library/logging.html"
"#logging-levels>`_. In addition to those, AiiDA defines the custom "
"``REPORT`` level, which, with a value of ``23``, is more verbose than the "
"``WARNING`` level, but less verbose than ``INFO``. The ``REPORT`` level is "
"AiiDA's default logging level."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:408
msgid ""
"When the problem is solved, we suggest to reset the default logging level, "
"with:"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:415
msgid "to avoid too much noise in the logfiles."
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:417
msgid "The config options set for the current profile can be viewed using"
msgstr ""

#: ../docs/source/intro/troubleshooting.rst:423
msgid "in the ``options`` row."
msgstr ""

#: ../docs/source/intro/tutorial.rst:12
msgid "Basic tutorial"
msgstr ""

#: ../docs/source/intro/tutorial.rst:14
msgid ""
"Welcome to the AiiDA tutorial! The goal of this tutorial is to give you a "
"basic idea of how AiiDA helps you in executing data-driven workflows. At the"
" end of this tutorial, you will know how to:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:18
msgid "Store data in the database and subsequently retrieve it."
msgstr ""

#: ../docs/source/intro/tutorial.rst:19
msgid ""
"Decorate a Python function such that its inputs and outputs are "
"automatically tracked."
msgstr ""

#: ../docs/source/intro/tutorial.rst:20
msgid "Run and monitor the status of processes."
msgstr ""

#: ../docs/source/intro/tutorial.rst:21
msgid "Explore and visualize the provenance graph."
msgstr ""

#: ../docs/source/intro/tutorial.rst:25
msgid ""
"If you are working on your own machine, note that the tutorial assumes that "
"you have a working AiiDA installation and have set up your AiiDA profile in "
"the current Python environment. If this is not the case, consult the "
":ref:`getting started page<intro:get_started>`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:29
msgid "Provenance"
msgstr ""

#: ../docs/source/intro/tutorial.rst:31
msgid ""
"Before we dive in, we need to briefly introduce one of the most important "
"concepts for AiiDA: *provenance*. An AiiDA database does not only contain "
"the results of your calculations, but also their inputs and each step that "
"was executed to obtain them. All of this information is stored in the form "
"of a *directed acyclic graph* (DAG). As an example, "
":numref:`fig_intro_workchain_graph` shows the provenance of the calculations"
" of this tutorial."
msgstr ""

#: ../docs/source/intro/tutorial.rst:41
msgid "Provenance Graph of a basic AiiDA WorkChain."
msgstr ""

#: ../docs/source/intro/tutorial.rst:43
msgid ""
"In the provenance graph, you can see different types of *nodes* represented "
"by different shapes. The green ellipses are ``Data`` nodes, the blue ellipse"
" is a ``Code`` node, and the rectangles represent *processes*, i.e. the "
"calculations performed in your *workflow*."
msgstr ""

#: ../docs/source/intro/tutorial.rst:46
msgid ""
"The provenance graph allows us to not only see what data we have, but also "
"how it was produced. During this tutorial, we will be using AiiDA to "
"generate the provenance graph in :numref:`fig_intro_workchain_graph` step by"
" step."
msgstr ""

#: ../docs/source/intro/tutorial.rst:50
msgid "Data nodes"
msgstr ""

#: ../docs/source/intro/tutorial.rst:52
msgid ""
"Before running any calculations, let's create and store a *data node*. AiiDA"
" ships with an interactive IPython shell that has many basic AiiDA classes "
"pre-loaded. To start the IPython shell, simply type in the terminal:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:60
msgid ""
"AiiDA implements data node types for the most common types of data (int, "
"float, str, etc.), which you can extend with your own (composite) data node "
"types if needed. For this tutorial, we'll keep it very simple, and start by "
"initializing an ``Int`` node and assigning it to the `node` variable:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:67
msgid "We can check the contents of the ``node`` variable like this:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:74
msgid "Quite a bit of information on our freshly created node is returned:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:76
msgid "The data node is of the type ``Int``"
msgstr ""

#: ../docs/source/intro/tutorial.rst:77
msgid ""
"The node has the *universally unique identifier* (**UUID**) ``eac48d2b-ae20"
"-438b-aeab-2d02b69eb6a8``"
msgstr ""

#: ../docs/source/intro/tutorial.rst:78
msgid "The node is currently not stored in the database ``(unstored)``"
msgstr ""

#: ../docs/source/intro/tutorial.rst:79
msgid "The integer value of the node is ``2``"
msgstr ""

#: ../docs/source/intro/tutorial.rst:81
msgid "Let's store the node in the database:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:88
msgid ""
"As you can see, the data node has now been assigned a *primary key* "
"(**PK**), a number that identifies the node in your database ``(pk: 1)``. "
"The PK and UUID both reference the node with the only difference that the PK"
" is unique *for your local database only*, whereas the UUID is a globally "
"unique identifier and can therefore be used between *different* databases. "
"Use the PK only if you are working within a single database, i.e. in an "
"interactive session and the UUID in all other cases."
msgstr ""

#: ../docs/source/intro/tutorial.rst:94
msgid ""
"The PK numbers shown throughout this tutorial assume that you start from a "
"completely empty database. It is possible that the nodes' PKs will be "
"different for your database!"
msgstr ""

#: ../docs/source/intro/tutorial.rst:97
msgid ""
"The UUIDs are generated randomly and are, therefore, **guaranteed** to be "
"different."
msgstr ""

#: ../docs/source/intro/tutorial.rst:99
msgid ""
"Next, let's leave the IPython shell by typing ``exit()`` and then enter. "
"Back in the terminal, use the ``verdi`` command line interface (CLI) to "
"check the data node we have just created:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:106
msgid "This prints something like the following:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:120
msgid ""
"Once again, we can see that the node is of type ``Int``, has PK = 1, and "
"UUID = ``eac48d2b-ae20-438b-aeab-2d02b69eb6a8``. Besides this information, "
"the ``verdi node show`` command also shows the (empty) ``label`` and "
"``description``, as well as the time the node was created (``ctime``) and "
"last modified (``mtime``)."
msgstr ""

#: ../docs/source/intro/tutorial.rst:123
msgid ""
"AiiDA already provides many standard data types, but you can also "
":ref:`create your own<topics:data_types:plugin>`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:126
msgid "Calculation functions"
msgstr ""

#: ../docs/source/intro/tutorial.rst:128
msgid ""
"Once your data is stored in the database, it is ready to be used for some "
"computational task. For example, let's say you want to multiply two ``Int`` "
"data nodes. The following Python function:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:137
msgid ""
"will give the desired result when applied to two ``Int`` nodes, but the "
"calculation will not be stored in the provenance graph. However, we can use "
"a `Python decorator <https://docs.python.org/3/glossary.html#term-"
"decorator>`_ provided by AiiDA to automatically make it part of the "
"provenance graph. Start up the AiiDA IPython shell again using ``verdi "
"shell`` and execute the following code snippet:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:149
msgid ""
"This converts the ``multiply`` function into an AiIDA *calculation "
"function*, the most basic execution unit in AiiDA. Next, load the ``Int`` "
"node you have created in the previous section using the ``load_node`` "
"function and the PK of the data node:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:156
msgid ""
"Of course, we need another integer to multiply with the first one. Let's "
"create a new ``Int`` data node and assign it to the variable ``y``:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:163
msgid "Now it's time to multiply the two numbers!"
msgstr ""

#: ../docs/source/intro/tutorial.rst:170
msgid ""
"Success! The ``calcfunction``-decorated ``multiply`` function has multiplied"
" the two ``Int`` data nodes and returned a new ``Int`` data node whose value"
" is the product of the two input nodes. Note that by executing the "
"``multiply`` function, all input and output nodes are automatically stored "
"in the database:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:179
msgid ""
"We had not yet stored the data node assigned to the ``y`` variable, but by "
"providing it as an input argument to the ``multiply`` function, it was "
"automatically stored with PK = 2. Similarly, the returned ``Int`` node with "
"value 6 has been stored with PK = 4."
msgstr ""

#: ../docs/source/intro/tutorial.rst:182
msgid ""
"Let's once again leave the IPython shell with ``exit()`` and look for the "
"process we have just run using the ``verdi`` CLI:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:188
msgid ""
"The returned list will be empty, but don't worry! By default, ``verdi "
"process list`` only returns the *active* processes. If you want to see *all*"
" processes (i.e. also the processes that are *terminated*), simply add the "
"``-a`` option:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:196
msgid "You should now see something like the following output:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:208
msgid ""
"We can see that our ``multiply`` calcfunction was created 1 minute ago, "
"assigned the PK 3, and has ``Finished``."
msgstr ""

#: ../docs/source/intro/tutorial.rst:210
msgid ""
"As a final step, let's have a look at the provenance of this simple "
"calculation. The provenance graph can be automatically generated using the "
"verdi CLI. Let's generate the provenance graph for the ``multiply`` "
"calculation function we have just run with PK = 3:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:218
msgid ""
"The command will write the provenance graph to a ``.pdf`` file. Use your "
"favorite PDF viewer to have a look. It should look something like the graph "
"shown in :numref:`fig_calcfun_graph`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:227
msgid "Provenance graph of the ``multiply`` calculation function."
msgstr ""

#: ../docs/source/intro/tutorial.rst:229
msgid ""
"Remember that the PK of the ``CalcJob`` can be different for your database."
msgstr ""

#: ../docs/source/intro/tutorial.rst:234
msgid "CalcJobs"
msgstr ""

#: ../docs/source/intro/tutorial.rst:236
msgid ""
"When running calculations that require an external code or run on a remote "
"machine, a simple calculation function is no longer sufficient. For this "
"purpose, AiiDA provides the ``CalcJob`` process class."
msgstr ""

#: ../docs/source/intro/tutorial.rst:239
msgid ""
"To run a ``CalcJob``, you need to set up two things: a ``code`` that is "
"going to implement the desired calculation and a ``computer`` for the "
"calculation to run on."
msgstr ""

#: ../docs/source/intro/tutorial.rst:241
msgid ""
"If you're running this tutorial in the Quantum Mobile VM or on Binder, these"
" have been pre-configured for you. If you're running on your own machine, "
"you can follow the instructions in the panel below."
msgstr ""

#: ../docs/source/intro/tutorial.rst:245
msgid "More details for how to :ref:`run external codes <how-to:run-codes>`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:249
msgid ""
"Let's begin by setting up the computer using the ``verdi computer`` "
"subcommand:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:256
msgid "The first commands sets up the computer with the following options:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:258
msgid "*label* (``-L``): tutor"
msgstr ""

#: ../docs/source/intro/tutorial.rst:259
msgid "*hostname* (``-H``): localhost"
msgstr ""

#: ../docs/source/intro/tutorial.rst:260
msgid "*transport* (``-T``): local"
msgstr ""

#: ../docs/source/intro/tutorial.rst:261
msgid "*scheduler* (``-S``): direct"
msgstr ""

#: ../docs/source/intro/tutorial.rst:262
msgid ""
"*work-dir* (``-w``): The ``work`` subdirectory of the current directory"
msgstr ""

#: ../docs/source/intro/tutorial.rst:264
msgid ""
"The second command *configures* the computer with a minimum interval between"
" connections (``--safe-interval``) of 5 seconds. For both commands, the "
"*non-interactive* option (``-n``) is added to not prompt for extra input."
msgstr ""

#: ../docs/source/intro/tutorial.rst:267
msgid "Next, let's set up the code we're going to use for the tutorial:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:273
msgid ""
"This command sets up a code with *label* ``add`` on the *computer* "
"``tutor``, using the *plugin* ``arithmetic.add``."
msgstr ""

#: ../docs/source/intro/tutorial.rst:275
msgid ""
"A typical real-world example of a computer is a remote supercomputing "
"facility. Codes can be anything from a Python script to powerful *ab initio*"
" codes such as Quantum Espresso or machine learning tools like Tensorflow. "
"Let's have a look at the codes that are available to us:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:286
msgid ""
"You can see a single code ``add@tutor``, with PK = 5, in the printed list. "
"This code allows us to add two integers together. The ``add@tutor`` "
"identifier indicates that the code with label ``add`` is run on the computer"
" with label ``tutor``. To see more details about the computer, you can use "
"the following ``verdi`` command:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:309
msgid ""
"We can see that the *Work directory* has been set up as the ``work`` "
"subdirectory of the current directory. This is the directory in which the "
"calculations running on the ``tutor`` computer will be executed."
msgstr ""

#: ../docs/source/intro/tutorial.rst:314
msgid ""
"You may have noticed that the PK of the ``tutor`` computer is 1, same as the"
" ``Int`` node we created at the start of this tutorial. This is because "
"different entities, such as nodes, computers and groups, are stored in "
"different tables of the database. So, the PKs for each entity type are "
"unique for each database, but entities of different types can have the same "
"PK within one database."
msgstr ""

#: ../docs/source/intro/tutorial.rst:318
msgid ""
"Let's now start up the ``verdi shell`` again and load the ``add@tutor`` code"
" using its label:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:324
msgid ""
"Every code has a convenient tool for setting up the required input, called "
"the *builder*. It can be obtained by using the ``get_builder`` method:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:331
msgid ""
"Using the builder, you can easily set up the calculation by directly "
"providing the input arguments. Let's use the ``Int`` node that was created "
"by our previous ``calcfunction`` as one of the inputs and a new node as the "
"second input:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:339
msgid ""
"In case that your nodes' PKs are different and you don't remember the PK of "
"the output node from the previous calculation, check the provenance graph "
"you generated earlier and use the UUID of the output node instead:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:346
msgid ""
"Note that you don't have to provide the entire UUID to load the node. As "
"long as the first part of the UUID is unique within your database, AiiDA "
"will find the node you are looking for."
msgstr ""

#: ../docs/source/intro/tutorial.rst:351
msgid ""
"One nifty feature of the builder is the ability to use tab completion for "
"the inputs. Try it out by typing ``builder.`` + ``<TAB>`` in the verdi "
"shell."
msgstr ""

#: ../docs/source/intro/tutorial.rst:354
msgid ""
"To execute the ``CalcJob``, we use the ``run`` function provided by the "
"AiiDA engine:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:361
msgid ""
"Wait for the process to complete. Once it is done, it will return a "
"dictionary with the output nodes:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:371
msgid ""
"Besides the sum of the two ``Int`` nodes, the calculation function also "
"returns two other outputs: one of type ``RemoteData`` and one of type "
"``FolderData``. See the :ref:`topics section on calculation jobs "
"<topics:calculations:usage:calcfunctions>` for more details. Now, exit the "
"IPython shell and once more check for *all* processes:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:379
msgid ""
"You should now see two processes in the list. One is the ``multiply`` "
"calcfunction you ran earlier, the second is the ``ArithmeticAddCalculation``"
" CalcJob that you have just run. Grab the PK of the "
"``ArithmeticAddCalculation``, and generate the provenance graph. The result "
"should look like the graph shown in :numref:`fig_calcjob_graph`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:393
msgid ""
"Provenance graph of the ``ArithmeticAddCalculation`` CalcJob, with one input"
" provided by the output of the ``multiply`` calculation function."
msgstr ""

#: ../docs/source/intro/tutorial.rst:395
msgid ""
"You can see more details on any process, including its inputs and outputs, "
"using the verdi shell:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:402
msgid "Submitting to the daemon"
msgstr ""

#: ../docs/source/intro/tutorial.rst:404
msgid ""
"When we used the ``run`` command in the previous section, the IPython shell "
"was blocked while it was waiting for the ``CalcJob`` to finish. This is not "
"a problem when we're simply adding two number together, but if we want to "
"run multiple calculations that take hours or days, this is no longer "
"practical. Instead, we are going to *submit* the ``CalcJob`` to the AiiDA "
"*daemon*. The daemon is a program that runs in the background and manages "
"submitted calculations until they are *terminated*. Let's first check the "
"status of the daemon using the ``verdi`` CLI:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:414
msgid ""
"If the daemon is running, the output will be something like the following:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:426
msgid "In this case, let's stop it for now:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:432
msgid ""
"Next, let's *submit* the ``CalcJob`` we ran previously. Start the ``verdi "
"shell`` and execute the Python code snippet below. This follows all the "
"steps we did previously, but now uses the ``submit`` function instead of "
"``run``:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:447
msgid ""
"When using ``submit`` the calculation job is not run in the local "
"interpreter but is sent off to the daemon and you get back control "
"instantly. Instead of the *result* of the calculation, it returns the node "
"of the ``CalcJob`` that was just submitted:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:454
msgid "Let's exit the IPython shell and have a look at the process list:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:460
msgid ""
"You should see the ``CalcJob`` you have just submitted, with the state "
"``Created``:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:472
msgid ""
"The ``CalcJob`` process is now waiting to be picked up by a daemon runner, "
"but the daemon is currently disabled. Let's start it up (again):"
msgstr ""

#: ../docs/source/intro/tutorial.rst:479
msgid ""
"Now you can either use ``verdi process list`` to follow the execution of the"
" ``CalcJob``, or ``watch`` its progress:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:485
msgid ""
"Let's wait for the ``CalcJob`` to complete and then use ``verdi process list"
" -a`` to see all processes we have run so far:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:500
msgid "Workflows"
msgstr ""

#: ../docs/source/intro/tutorial.rst:502
msgid ""
"So far we have executed each process manually. AiiDA allows us to automate "
"these steps by linking them together in a *workflow*, whose provenance is "
"stored to ensure reproducibility. For this tutorial we have prepared a basic"
" ``WorkChain`` that is already implemented in ``aiida-core``. You can see "
"the code below:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:513
msgid ""
"First, we recognize the ``multiply`` function we have used earlier, "
"decorated as a ``calcfunction``. The ``define`` class method specifies the "
"``input`` and ``output`` of the ``WorkChain``, as well as the ``outline``, "
"which are the steps of the workflow. These steps are provided as methods of "
"the ``MultiplyAddWorkChain`` class."
msgstr ""

#: ../docs/source/intro/tutorial.rst:519
msgid ""
"Besides WorkChain's, workflows can also be implemented as *work functions*. "
"These are ideal for workflows that are not very computationally intensive "
"and can be easily implemented in a Python function."
msgstr ""

#: ../docs/source/intro/tutorial.rst:522
msgid ""
"Let's run the ``WorkChain`` above! Start up the ``verdi shell`` and load the"
" ``MultiplyAddWorkChain`` using the ``WorkflowFactory``:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:529
msgid ""
"The ``WorkflowFactory`` is a useful and robust tool for loading workflows "
"based on their *entry point*, e.g. ``'arithmetic.multiply_add'`` in this "
"case. Similar to a ``CalcJob``, the ``WorkChain`` input can be set up using "
"a builder:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:540
msgid ""
"Once the ``WorkChain`` input has been set up, we submit it to the daemon "
"using the ``submit`` function from the AiiDA engine:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:547
msgid "Now quickly leave the IPython shell and check the process list:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:553
msgid ""
"Depending on which step the workflow is running, you should get something "
"like the following:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:570
msgid ""
"We can see that the ``MultiplyAddWorkChain`` is currently waiting for its "
"*child process*, the ``ArithmeticAddCalculation``, to finish. Check the "
"process list again for *all* processes (You should know how by now!). After "
"about half a minute, all the processes should be in the ``Finished`` state. "
"The ``verdi process status`` command prints a *hierarchical* overview of the"
" processes called by the work chain:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:582
msgid ""
"The bracket ``[3:result]`` indicates the current step in the outline of the "
":py:class:`~aiida.workflows.arithmetic.multiply_add.MultiplyAddWorkChain` "
"(step 3, with name ``result``). The ``process status`` is particularly "
"useful for debugging complex work chains, since it helps pinpoint where a "
"problem occurred."
msgstr ""

#: ../docs/source/intro/tutorial.rst:585
msgid ""
"We can now generate the full provenance graph for the ``WorkChain`` with:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:591
msgid ""
"Look familiar? The provenance graph should be similar to the one we showed "
"at the start of this tutorial (:numref:`fig_workchain_graph`)."
msgstr ""

#: ../docs/source/intro/tutorial.rst:599
msgid "Final provenance Graph of the basic AiiDA tutorial."
msgstr ""

#: ../docs/source/intro/tutorial.rst:605
msgid "Next Steps"
msgstr ""

#: ../docs/source/intro/tutorial.rst:607
msgid ""
"Congratulations! You have completed the first step to becoming an AiiDA "
"expert."
msgstr ""

#: ../docs/source/intro/tutorial.rst:609
msgid ""
"We have also compiled useful how-to guides that are especially relevant for "
"the following use cases:"
msgstr ""

#: ../docs/source/intro/tutorial.rst:617
msgid "Designing a workflow"
msgstr ""

#: ../docs/source/intro/tutorial.rst:617
msgid ""
"After reading the :ref:`Basic Tutorial <tutorial:basic>`, you may want to "
"learn about how to encode the logic of a typical scientific workflow in the "
":ref:`writing workflows how-to <how-to:write-workflows>`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:620
msgid "Reusable data types"
msgstr ""

#: ../docs/source/intro/tutorial.rst:620
msgid ""
"If you have a certain input or output data type, which you use often, then "
"you may wish to turn it into its own :ref:`data plugin "
"<topics:data_types:plugin>`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:623 ../docs/source/intro/tutorial.rst:655
msgid "Exploring your data"
msgstr ""

#: ../docs/source/intro/tutorial.rst:623 ../docs/source/intro/tutorial.rst:655
msgid ""
"Once you have run multiple computations, the :ref:`find and query data how-"
"to <how-to:data:find>` can show you how to efficiently explore your data. "
"The data lineage can also be visualised as a :ref:`provenance graph <how-"
"to:data:visualise-provenance>`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:626 ../docs/source/intro/tutorial.rst:658
msgid "Sharing your data"
msgstr ""

#: ../docs/source/intro/tutorial.rst:626 ../docs/source/intro/tutorial.rst:658
msgid ""
"You can export all or part of your data to file with the :ref:`export/import"
" functionality<how-to:share:archives>` or you can even serve your data over "
"HTTP(S) using the :ref:`AiiDA REST API <how-to:share:serve>`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:628
msgid "Sharing your workflows"
msgstr ""

#: ../docs/source/intro/tutorial.rst:629
msgid ""
"Once you have a working computation workflow, you may also wish to "
":ref:`package it into a python module <how-to:plugins-develop>` for others "
"to use."
msgstr ""

#: ../docs/source/intro/tutorial.rst:636 ../docs/source/intro/tutorial.rst:652
msgid "Working with external codes"
msgstr ""

#: ../docs/source/intro/tutorial.rst:635 ../docs/source/intro/tutorial.rst:651
msgid ""
"Existing calculation plugins, for interfacing with external codes, are "
"available on the `aiida plugin registry <https://aiidateam.github.io/aiida-"
"registry/>`_. If none meet your needs, then the :ref:`external codes how-to "
"<how-to:plugin-codes>` can show you how to create your own calculation "
"plugin."
msgstr ""

#: ../docs/source/intro/tutorial.rst:639
msgid "Tuning performance"
msgstr ""

#: ../docs/source/intro/tutorial.rst:639
msgid ""
"To optimise the performance of AiiDA for running many concurrent "
"computations see the :ref:`tuning performance how-to <how-"
"to:installation:performance>`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:641
msgid "Saving computational resources"
msgstr ""

#: ../docs/source/intro/tutorial.rst:642
msgid ""
"AiiDA can cache and reuse the outputs of identical computations, as "
"described in the :ref:`caching how-to <how-to:run-codes:caching>`."
msgstr ""

#: ../docs/source/intro/tutorial.rst:648
msgid "Connecting to supercomputers"
msgstr ""

#: ../docs/source/intro/tutorial.rst:647
msgid ""
"To setup up a computer which can communicate with a high-performance "
"computer over SSH, see the :ref:`how-to for running external codes <how-to"
":run-codes>`, or add a :ref:`custom transport <how-to:plugin-"
"codes:transport>`. AiiDA has pre-written scheduler plugins to work with LSF,"
" PBSPro, SGE, Slurm and Torque."
msgstr ""

#: ../docs/source/intro/tutorial.rst:660
msgid "Sharing your calculation plugin"
msgstr ""

#: ../docs/source/intro/tutorial.rst:661
msgid ""
"Once you have a working plugin, you may also wish to :ref:`package it into a"
" python module <how-to:plugins-develop>` for others to use."
msgstr ""

#: ../docs/source/intro/tutorial.rst:665
msgid "Todo"
msgstr ""

#: ../docs/source/intro/tutorial.rst:667
msgid ""
"Add to \"Connecting to supercomputers\": , or you can add a :ref:`custom "
"scheduler <how-to:plugin-codes:scheduler>`."
msgstr ""
